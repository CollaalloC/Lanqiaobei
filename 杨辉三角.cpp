/*问题描述
# 基础练习 #二维数组

杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。
它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。

下面给出了杨辉三角形的前4行：
   1
  1 1
 1 2 1
1 3 3 1
给出n，输出它的前n行。

输入格式
输入包含一个数n。
输出格式
输出杨辉三角形的前n行。每一行从这一行的第一个数开始依次输出，中间使用一个空格分隔。请不要在前面输出多余的空格。
样例输入
4
样例输出
1
1 1
1 2 1
1 3 3 1
数据规模与约定
1 <= n <= 34。
*/

/*问题分析：
    1.可以近似看作二叉树或者堆的数组处理.[x](错误路线)，不能当初二叉树，二叉树子节点互相独立，关系为2的幂次。杨氏三角不同，互有交叉
    2.使用二维数组处理
*/

#include <iostream>
use namespace std;

/*错误路线
int main()
{
    int n;
    int a[1000];
    //char a[1000];//字符数组,方便最后输出，为了每一行储存换行符
    //行不通，当字符数字超过9后，便不能通过 'x' -'0'来获得数字
    int sum = 0;
    cin >> n;
    //二叉树 一维数组控制法
    for (int i = 1; i <= n; i++)//外层循环
    {
        sum += i;//用来确定前面行数所占个数，确定行首和行尾位置
        for(int j = sum; j< i +sum; j++)//内层循环，每一层行内操作
        {
            if(j == sum || j == i +sum -1)
            {
                a[j] ='1';
            }
            else
            {
                a[j] = 
            }
            
            
        }
    }
}
*/